{"remainingRequest":"D:\\个人成长经历\\锐名科技\\产品开发\\商管院\\BusinessSchool-Web\\node_modules\\babel-loader\\lib\\index.js!D:\\个人成长经历\\锐名科技\\产品开发\\商管院\\BusinessSchool-Web\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\个人成长经历\\锐名科技\\产品开发\\商管院\\BusinessSchool-Web\\src\\utils\\axios-interceptors.js","dependencies":[{"path":"D:\\个人成长经历\\锐名科技\\产品开发\\商管院\\BusinessSchool-Web\\src\\utils\\axios-interceptors.js","mtime":1594286685358},{"path":"D:\\个人成长经历\\锐名科技\\产品开发\\商管院\\BusinessSchool-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\个人成长经历\\锐名科技\\产品开发\\商管院\\BusinessSchool-Web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\个人成长经历\\锐名科技\\产品开发\\商管院\\BusinessSchool-Web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/\\u4E2A\\u4EBA\\u6210\\u957F\\u7ECF\\u5386/\\u9510\\u540D\\u79D1\\u6280/\\u4EA7\\u54C1\\u5F00\\u53D1/\\u5546\\u7BA1\\u9662/BusinessSchool-Web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\n/* 创建axios实例 */\nvar axios = _axios.default.create({\n  baseURL: process.env.API_HOST,\n\n  /* 在config/dev.evn.js、prod.evn.js里面进行配置 */\n  timeout: 60000\n  /* 设置超时时间为5s */\n\n});\n\n/* request拦截器 ==> 对请求参数进行处理 */\naxios.interceptors.request.use(function (config) {\n  console.log(\"\\u8BF7\\u6C42\\u643A\\u5E26Token\\uFF1A\".concat(_store.default.getters.token));\n\n  if (_store.default.getters.token) {\n    config.headers['Authorization'] = (0, _auth.getToken)(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  config.headers.post['Content-Type'] = 'application/json;charset=UTF-8';\n  return config;\n}, function (error) {\n  _elementUi.Message.error('请求失败');\n\n  Promise.reject(error);\n});\n/* response拦截器 ==> 对响应做处理 */\n\naxios.interceptors.response.use(function (response) {\n  // console.log(response.data.code)\n  if (response.status == '200') {\n    return response;\n  } else {\n    _elementUi.Message.error('请求失败');\n  }\n}, function (error) {\n  /* 判断error的status代码，并将对应的信息告知用户 */\n  var text = '';\n  var err = JSON.parse(JSON.stringify(error));\n\n  if (err.response) {\n    switch (error.response.status) {\n      case 400:\n        text = '请求错误(400)';\n        break;\n\n      case 401:\n        text = '请求超时(401)'; // return this.$router.replace('/Login')\n\n        break;\n\n      case 403:\n        text = '拒绝访问(403)';\n        break;\n\n      case 404:\n        text = '请求出错(404)';\n        break;\n\n      case 408:\n        text = '请求超时(408)';\n        break;\n\n      case 500:\n        text = '服务器错误(500)';\n        break;\n\n      case 501:\n        text = '服务未实现(501)';\n        break;\n\n      case 502:\n        text = '网络错误(502)';\n        break;\n\n      case 503:\n        text = '服务不可用(503)';\n        break;\n\n      case 504:\n        text = '网络超时(504)';\n        break;\n\n      case 505:\n        text = 'HTTP版本不受支持(505)';\n        break;\n\n      default:\n        text = '网络连接出错';\n    }\n  } else {\n    text = '连接服务器失败,请退出重试!';\n  }\n\n  _elementUi.Message.error(text);\n\n  return Promise.reject(error);\n});\n/* 将写好的axios实例暴露出去 */\n\nvar _default = axios;\nexports.default = _default;",null]}